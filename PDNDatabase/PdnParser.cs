//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g 2012-03-20 16:16:32

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System;
using System.Linq;
using System.Text;
using PdnDatabase;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class PdnParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALPHANUMERICMOVE", "DOT", "ELLIPSES", "GAMERESULT", "IDENTIFIER", "INT", "LBRACKET", "LINECOMMENT", "LPAREN", "MOVENUMBER", "MOVESTRENGTH1", "MOVESTRENGTH2", "NAG", "NESTED_ML_COMMENT", "RBRACKET", "RPAREN", "SQUARE", "STRING", "WHITESPACE", "'-'", "'x'"
	};
	public const int EOF=-1;
	public const int ALPHANUMERICMOVE=4;
	public const int DOT=5;
	public const int ELLIPSES=6;
	public const int GAMERESULT=7;
	public const int IDENTIFIER=8;
	public const int INT=9;
	public const int LBRACKET=10;
	public const int LINECOMMENT=11;
	public const int LPAREN=12;
	public const int MOVENUMBER=13;
	public const int MOVESTRENGTH1=14;
	public const int MOVESTRENGTH2=15;
	public const int NAG=16;
	public const int NESTED_ML_COMMENT=17;
	public const int RBRACKET=18;
	public const int RPAREN=19;
	public const int SQUARE=20;
	public const int STRING=21;
	public const int WHITESPACE=22;
	public const int T__23=23;
	public const int T__24=24;

	public PdnParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public PdnParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return PdnParser.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g"; } }

		
		public List<PdnGame> Games = new List<PdnGame>();
		private PdnGame _game;


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_pdnFile();
	partial void LeaveRule_pdnFile();
	// $ANTLR start "pdnFile"
	// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:21:8: public pdnFile : ( game )+ ;
	[GrammarRule("pdnFile")]
	public void pdnFile()
	{
		EnterRule_pdnFile();
		EnterRule("pdnFile", 1);
		TraceIn("pdnFile", 1);
		try { DebugEnterRule(GrammarFileName, "pdnFile");
		DebugLocation(21, 23);
		try
		{
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:21:17: ( ( game )+ )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:21:19: ( game )+
			{
			DebugLocation(21, 19);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:21:19: ( game )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1==LBRACKET))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:21:19: game
					{
					DebugLocation(21, 19);
					PushFollow(Follow._game_in_pdnFile42);
					game();
					PopFollow();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("pdnFile", 1);
			LeaveRule("pdnFile", 1);
			LeaveRule_pdnFile();
		}
		DebugLocation(21, 23);
		} finally { DebugExitRule(GrammarFileName, "pdnFile"); }
		return;

	}
	// $ANTLR end "pdnFile"

	partial void EnterRule_game();
	partial void LeaveRule_game();
	// $ANTLR start "game"
	// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:22:1: game : gameHeader gameBody GAMERESULT ;
	[GrammarRule("game")]
	private void game()
	{
		EnterRule_game();
		EnterRule("game", 2);
		TraceIn("game", 2);

			_game = new PdnGame();
			Games.Add(_game);	

		try { DebugEnterRule(GrammarFileName, "game");
		DebugLocation(22, 32);
		try
		{
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:28:3: ( gameHeader gameBody GAMERESULT )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:28:3: gameHeader gameBody GAMERESULT
			{
			DebugLocation(28, 3);
			PushFollow(Follow._gameHeader_in_game57);
			gameHeader();
			PopFollow();

			DebugLocation(28, 14);
			PushFollow(Follow._gameBody_in_game59);
			gameBody();
			PopFollow();

			DebugLocation(28, 23);
			Match(input,GAMERESULT,Follow._GAMERESULT_in_game61); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("game", 2);
			LeaveRule("game", 2);
			LeaveRule_game();
		}
		DebugLocation(28, 32);
		} finally { DebugExitRule(GrammarFileName, "game"); }
		return;

	}
	// $ANTLR end "game"

	partial void EnterRule_gameHeader();
	partial void LeaveRule_gameHeader();
	// $ANTLR start "gameHeader"
	// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:29:1: gameHeader : ( pdnTag )+ ;
	[GrammarRule("gameHeader")]
	private void gameHeader()
	{
		EnterRule_gameHeader();
		EnterRule("gameHeader", 3);
		TraceIn("gameHeader", 3);
		try { DebugEnterRule(GrammarFileName, "gameHeader");
		DebugLocation(29, 20);
		try
		{
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:29:12: ( ( pdnTag )+ )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:29:14: ( pdnTag )+
			{
			DebugLocation(29, 14);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:29:14: ( pdnTag )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==LBRACKET))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:29:14: pdnTag
					{
					DebugLocation(29, 14);
					PushFollow(Follow._pdnTag_in_gameHeader68);
					pdnTag();
					PopFollow();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("gameHeader", 3);
			LeaveRule("gameHeader", 3);
			LeaveRule_gameHeader();
		}
		DebugLocation(29, 20);
		} finally { DebugExitRule(GrammarFileName, "gameHeader"); }
		return;

	}
	// $ANTLR end "gameHeader"

	partial void EnterRule_gameBody();
	partial void LeaveRule_gameBody();
	// $ANTLR start "gameBody"
	// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:30:1: gameBody : ( gameMove | variation | comment | NAG )+ ;
	[GrammarRule("gameBody")]
	private void gameBody()
	{
		EnterRule_gameBody();
		EnterRule("gameBody", 4);
		TraceIn("gameBody", 4);
		try { DebugEnterRule(GrammarFileName, "gameBody");
		DebugLocation(30, 50);
		try
		{
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:30:10: ( ( gameMove | variation | comment | NAG )+ )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:30:12: ( gameMove | variation | comment | NAG )+
			{
			DebugLocation(30, 12);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:30:12: ( gameMove | variation | comment | NAG )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=5;
				try { DebugEnterDecision(3, false);
				switch (input.LA(1))
				{
				case ALPHANUMERICMOVE:
				case ELLIPSES:
				case MOVENUMBER:
				case SQUARE:
					{
					alt3 = 1;
					}
					break;
				case LPAREN:
					{
					alt3 = 2;
					}
					break;
				case LINECOMMENT:
				case NESTED_ML_COMMENT:
					{
					alt3 = 3;
					}
					break;
				case NAG:
					{
					alt3 = 4;
					}
					break;
				}

				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:30:13: gameMove
					{
					DebugLocation(30, 13);
					PushFollow(Follow._gameMove_in_gameBody77);
					gameMove();
					PopFollow();


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:30:24: variation
					{
					DebugLocation(30, 24);
					PushFollow(Follow._variation_in_gameBody81);
					variation();
					PopFollow();


					}
					break;
				case 3:
					DebugEnterAlt(3);
					// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:30:36: comment
					{
					DebugLocation(30, 36);
					PushFollow(Follow._comment_in_gameBody85);
					comment();
					PopFollow();


					}
					break;
				case 4:
					DebugEnterAlt(4);
					// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:30:46: NAG
					{
					DebugLocation(30, 46);
					Match(input,NAG,Follow._NAG_in_gameBody89); 

					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("gameBody", 4);
			LeaveRule("gameBody", 4);
			LeaveRule_gameBody();
		}
		DebugLocation(30, 50);
		} finally { DebugExitRule(GrammarFileName, "gameBody"); }
		return;

	}
	// $ANTLR end "gameBody"

	partial void EnterRule_comment();
	partial void LeaveRule_comment();
	// $ANTLR start "comment"
	// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:31:1: comment : ( NESTED_ML_COMMENT | LINECOMMENT ) ;
	[GrammarRule("comment")]
	private ParserRuleReturnScope<IToken> comment()
	{
		EnterRule_comment();
		EnterRule("comment", 5);
		TraceIn("comment", 5);
		ParserRuleReturnScope<IToken> retval = new ParserRuleReturnScope<IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "comment");
		DebugLocation(31, 35);
		try
		{
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:36:3: ( ( NESTED_ML_COMMENT | LINECOMMENT ) )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:
			{
			DebugLocation(36, 3);
			if (input.LA(1)==LINECOMMENT||input.LA(1)==NESTED_ML_COMMENT)
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);


				_game.Body.Add(new PdnComment(input.ToString(retval.Start,input.LT(-1))));

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("comment", 5);
			LeaveRule("comment", 5);
			LeaveRule_comment();
		}
		DebugLocation(36, 35);
		} finally { DebugExitRule(GrammarFileName, "comment"); }
		return retval;

	}
	// $ANTLR end "comment"

	partial void EnterRule_pdnTag();
	partial void LeaveRule_pdnTag();
	// $ANTLR start "pdnTag"
	// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:37:1: pdnTag : LBRACKET IDENTIFIER STRING RBRACKET ;
	[GrammarRule("pdnTag")]
	private void pdnTag()
	{
		EnterRule_pdnTag();
		EnterRule("pdnTag", 6);
		TraceIn("pdnTag", 6);
		IToken IDENTIFIER1 = default(IToken);
		IToken STRING2 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "pdnTag");
		DebugLocation(37, 0);
		try
		{
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:37:17: ( LBRACKET IDENTIFIER STRING RBRACKET )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:37:19: LBRACKET IDENTIFIER STRING RBRACKET
			{
			DebugLocation(37, 19);
			Match(input,LBRACKET,Follow._LBRACKET_in_pdnTag127); 
			DebugLocation(37, 28);
			IDENTIFIER1=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_pdnTag129); 
			DebugLocation(37, 39);
			STRING2=(IToken)Match(input,STRING,Follow._STRING_in_pdnTag131); 
			DebugLocation(37, 46);
			Match(input,RBRACKET,Follow._RBRACKET_in_pdnTag133); 
			DebugLocation(38, 1);

				_game.Tags.Add (new PdnTag ((IDENTIFIER1!=null?IDENTIFIER1.Text:null), (STRING2!=null?STRING2.Text:null)));


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("pdnTag", 6);
			LeaveRule("pdnTag", 6);
			LeaveRule_pdnTag();
		}
		DebugLocation(41, 0);
		} finally { DebugExitRule(GrammarFileName, "pdnTag"); }
		return;

	}
	// $ANTLR end "pdnTag"

	partial void EnterRule_gameMove();
	partial void LeaveRule_gameMove();
	// $ANTLR start "gameMove"
	// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:42:1: gameMove : ( ( MOVENUMBER )? move ( moveStrength )? ) ;
	[GrammarRule("gameMove")]
	private void gameMove()
	{
		EnterRule_gameMove();
		EnterRule("gameMove", 7);
		TraceIn("gameMove", 7);
		IToken MOVENUMBER3 = default(IToken);
		ParserRuleReturnScope<IToken> move4 = default(ParserRuleReturnScope<IToken>);
		ParserRuleReturnScope<IToken> moveStrength5 = default(ParserRuleReturnScope<IToken>);

		try { DebugEnterRule(GrammarFileName, "gameMove");
		DebugLocation(42, 1);
		try
		{
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:42:17: ( ( ( MOVENUMBER )? move ( moveStrength )? ) )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:42:19: ( ( MOVENUMBER )? move ( moveStrength )? )
			{
			DebugLocation(42, 19);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:42:19: ( ( MOVENUMBER )? move ( moveStrength )? )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:42:20: ( MOVENUMBER )? move ( moveStrength )?
			{
			DebugLocation(42, 20);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:42:20: ( MOVENUMBER )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==MOVENUMBER))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:42:20: MOVENUMBER
				{
				DebugLocation(42, 20);
				MOVENUMBER3=(IToken)Match(input,MOVENUMBER,Follow._MOVENUMBER_in_gameMove152); 

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(42, 32);
			PushFollow(Follow._move_in_gameMove155);
			move4=move();
			PopFollow();

			DebugLocation(42, 37);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:42:37: ( moveStrength )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if (((LA5_1>=MOVESTRENGTH1 && LA5_1<=MOVESTRENGTH2)))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:42:37: moveStrength
				{
				DebugLocation(42, 37);
				PushFollow(Follow._moveStrength_in_gameMove157);
				moveStrength5=moveStrength();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			}

			DebugLocation(43, 1);

				_game.Body.Add(new PdnMove((MOVENUMBER3!=null?MOVENUMBER3.Text:null), (move4!=null?input.ToString(move4.Start,move4.Stop):null), (moveStrength5!=null?input.ToString(moveStrength5.Start,moveStrength5.Stop):null)));


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("gameMove", 7);
			LeaveRule("gameMove", 7);
			LeaveRule_gameMove();
		}
		DebugLocation(45, 1);
		} finally { DebugExitRule(GrammarFileName, "gameMove"); }
		return;

	}
	// $ANTLR end "gameMove"

	partial void EnterRule_variation();
	partial void LeaveRule_variation();
	// $ANTLR start "variation"
	// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:46:1: variation : LPAREN gameBody RPAREN ;
	[GrammarRule("variation")]
	private void variation()
	{
		EnterRule_variation();
		EnterRule("variation", 8);
		TraceIn("variation", 8);
		try { DebugEnterRule(GrammarFileName, "variation");
		DebugLocation(46, 40);
		try
		{
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:46:17: ( LPAREN gameBody RPAREN )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:46:19: LPAREN gameBody RPAREN
			{
			DebugLocation(46, 19);
			Match(input,LPAREN,Follow._LPAREN_in_variation174); 
			DebugLocation(46, 26);
			PushFollow(Follow._gameBody_in_variation176);
			gameBody();
			PopFollow();

			DebugLocation(46, 35);
			Match(input,RPAREN,Follow._RPAREN_in_variation178); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variation", 8);
			LeaveRule("variation", 8);
			LeaveRule_variation();
		}
		DebugLocation(46, 40);
		} finally { DebugExitRule(GrammarFileName, "variation"); }
		return;

	}
	// $ANTLR end "variation"

	partial void EnterRule_move();
	partial void LeaveRule_move();
	// $ANTLR start "move"
	// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:47:1: move : ( numericMove | ALPHANUMERICMOVE | ELLIPSES );
	[GrammarRule("move")]
	private ParserRuleReturnScope<IToken> move()
	{
		EnterRule_move();
		EnterRule("move", 9);
		TraceIn("move", 9);
		ParserRuleReturnScope<IToken> retval = new ParserRuleReturnScope<IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "move");
		DebugLocation(47, 59);
		try
		{
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:47:17: ( numericMove | ALPHANUMERICMOVE | ELLIPSES )
			int alt6=3;
			try { DebugEnterDecision(6, false);
			switch (input.LA(1))
			{
			case SQUARE:
				{
				alt6 = 1;
				}
				break;
			case ALPHANUMERICMOVE:
				{
				alt6 = 2;
				}
				break;
			case ELLIPSES:
				{
				alt6 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:47:19: numericMove
				{
				DebugLocation(47, 19);
				PushFollow(Follow._numericMove_in_move196);
				numericMove();
				PopFollow();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:47:33: ALPHANUMERICMOVE
				{
				DebugLocation(47, 33);
				Match(input,ALPHANUMERICMOVE,Follow._ALPHANUMERICMOVE_in_move200); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:47:52: ELLIPSES
				{
				DebugLocation(47, 52);
				Match(input,ELLIPSES,Follow._ELLIPSES_in_move204); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("move", 9);
			LeaveRule("move", 9);
			LeaveRule_move();
		}
		DebugLocation(47, 59);
		} finally { DebugExitRule(GrammarFileName, "move"); }
		return retval;

	}
	// $ANTLR end "move"

	partial void EnterRule_moveStrength();
	partial void LeaveRule_moveStrength();
	// $ANTLR start "moveStrength"
	// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:48:1: moveStrength : ( MOVESTRENGTH1 | MOVESTRENGTH2 );
	[GrammarRule("moveStrength")]
	private ParserRuleReturnScope<IToken> moveStrength()
	{
		EnterRule_moveStrength();
		EnterRule("moveStrength", 10);
		TraceIn("moveStrength", 10);
		ParserRuleReturnScope<IToken> retval = new ParserRuleReturnScope<IToken>();
		retval.Start = (IToken)input.LT(1);

		try { DebugEnterRule(GrammarFileName, "moveStrength");
		DebugLocation(48, 47);
		try
		{
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:48:17: ( MOVESTRENGTH1 | MOVESTRENGTH2 )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:
			{
			DebugLocation(48, 17);
			if ((input.LA(1)>=MOVESTRENGTH1 && input.LA(1)<=MOVESTRENGTH2))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("moveStrength", 10);
			LeaveRule("moveStrength", 10);
			LeaveRule_moveStrength();
		}
		DebugLocation(48, 47);
		} finally { DebugExitRule(GrammarFileName, "moveStrength"); }
		return retval;

	}
	// $ANTLR end "moveStrength"

	partial void EnterRule_numericMove();
	partial void LeaveRule_numericMove();
	// $ANTLR start "numericMove"
	// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:56:1: numericMove : SQUARE ( ( '-' | 'x' ) SQUARE )+ ;
	[GrammarRule("numericMove")]
	private void numericMove()
	{
		EnterRule_numericMove();
		EnterRule("numericMove", 11);
		TraceIn("numericMove", 11);
		try { DebugEnterRule(GrammarFileName, "numericMove");
		DebugLocation(56, 29);
		try
		{
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:57:2: ( SQUARE ( ( '-' | 'x' ) SQUARE )+ )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:57:4: SQUARE ( ( '-' | 'x' ) SQUARE )+
			{
			DebugLocation(57, 4);
			Match(input,SQUARE,Follow._SQUARE_in_numericMove282); 
			DebugLocation(57, 11);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:57:11: ( ( '-' | 'x' ) SQUARE )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if (((LA7_1>=23 && LA7_1<=24)))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:57:12: ( '-' | 'x' ) SQUARE
					{
					DebugLocation(57, 12);
					if ((input.LA(1)>=23 && input.LA(1)<=24))
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(57, 22);
					Match(input,SQUARE,Follow._SQUARE_in_numericMove291); 

					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("numericMove", 11);
			LeaveRule("numericMove", 11);
			LeaveRule_numericMove();
		}
		DebugLocation(57, 29);
		} finally { DebugExitRule(GrammarFileName, "numericMove"); }
		return;

	}
	// $ANTLR end "numericMove"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _game_in_pdnFile42 = new BitSet(new ulong[]{0x402UL});
		public static readonly BitSet _gameHeader_in_game57 = new BitSet(new ulong[]{0x133850UL});
		public static readonly BitSet _gameBody_in_game59 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _GAMERESULT_in_game61 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pdnTag_in_gameHeader68 = new BitSet(new ulong[]{0x402UL});
		public static readonly BitSet _gameMove_in_gameBody77 = new BitSet(new ulong[]{0x133852UL});
		public static readonly BitSet _variation_in_gameBody81 = new BitSet(new ulong[]{0x133852UL});
		public static readonly BitSet _comment_in_gameBody85 = new BitSet(new ulong[]{0x133852UL});
		public static readonly BitSet _NAG_in_gameBody89 = new BitSet(new ulong[]{0x133852UL});
		public static readonly BitSet _LBRACKET_in_pdnTag127 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _IDENTIFIER_in_pdnTag129 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _STRING_in_pdnTag131 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _RBRACKET_in_pdnTag133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MOVENUMBER_in_gameMove152 = new BitSet(new ulong[]{0x100050UL});
		public static readonly BitSet _move_in_gameMove155 = new BitSet(new ulong[]{0xC002UL});
		public static readonly BitSet _moveStrength_in_gameMove157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_variation174 = new BitSet(new ulong[]{0x133850UL});
		public static readonly BitSet _gameBody_in_variation176 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _RPAREN_in_variation178 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericMove_in_move196 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALPHANUMERICMOVE_in_move200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELLIPSES_in_move204 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SQUARE_in_numericMove282 = new BitSet(new ulong[]{0x1800000UL});
		public static readonly BitSet _set_in_numericMove285 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _SQUARE_in_numericMove291 = new BitSet(new ulong[]{0x1800002UL});
	}
	#endregion Follow sets
}
