//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g 2012-03-20 16:16:33

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class PdnLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ALPHANUMERICMOVE=4;
	public const int DOT=5;
	public const int ELLIPSES=6;
	public const int GAMERESULT=7;
	public const int IDENTIFIER=8;
	public const int INT=9;
	public const int LBRACKET=10;
	public const int LINECOMMENT=11;
	public const int LPAREN=12;
	public const int MOVENUMBER=13;
	public const int MOVESTRENGTH1=14;
	public const int MOVESTRENGTH2=15;
	public const int NAG=16;
	public const int NESTED_ML_COMMENT=17;
	public const int RBRACKET=18;
	public const int RPAREN=19;
	public const int SQUARE=20;
	public const int STRING=21;
	public const int WHITESPACE=22;
	public const int T__23=23;
	public const int T__24=24;

    // delegates
    // delegators

	public PdnLexer()
	{
		OnCreated();
	}

	public PdnLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public PdnLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__23();
	partial void LeaveRule_T__23();

	// $ANTLR start "T__23"
	[GrammarRule("T__23")]
	private void mT__23()
	{
		EnterRule_T__23();
		EnterRule("T__23", 1);
		TraceIn("T__23", 1);
		try
		{
			int _type = T__23;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:7:7: ( '-' )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:7:9: '-'
			{
			DebugLocation(7, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__23", 1);
			LeaveRule("T__23", 1);
			LeaveRule_T__23();
		}
	}
	// $ANTLR end "T__23"

	partial void EnterRule_T__24();
	partial void LeaveRule_T__24();

	// $ANTLR start "T__24"
	[GrammarRule("T__24")]
	private void mT__24()
	{
		EnterRule_T__24();
		EnterRule("T__24", 2);
		TraceIn("T__24", 2);
		try
		{
			int _type = T__24;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:8:7: ( 'x' )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:8:9: 'x'
			{
			DebugLocation(8, 9);
			Match('x'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__24", 2);
			LeaveRule("T__24", 2);
			LeaveRule_T__24();
		}
	}
	// $ANTLR end "T__24"

	partial void EnterRule_GAMERESULT();
	partial void LeaveRule_GAMERESULT();

	// $ANTLR start "GAMERESULT"
	[GrammarRule("GAMERESULT")]
	private void mGAMERESULT()
	{
		EnterRule_GAMERESULT();
		EnterRule("GAMERESULT", 3);
		TraceIn("GAMERESULT", 3);
		try
		{
			int _type = GAMERESULT;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:50:17: ( ( '1-0' | '1/2-1/2' | '0-1' | '2-0' | '1-1' | '0-2' | '0-0' | '*' ) ( WHITESPACE )+ )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:50:19: ( '1-0' | '1/2-1/2' | '0-1' | '2-0' | '1-1' | '0-2' | '0-0' | '*' ) ( WHITESPACE )+
			{
			DebugLocation(50, 19);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:50:19: ( '1-0' | '1/2-1/2' | '0-1' | '2-0' | '1-1' | '0-2' | '0-0' | '*' )
			int alt1=8;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case '1':
				{
				int LA1_2 = input.LA(2);

				if ((LA1_2=='-'))
				{
					int LA1_3 = input.LA(3);

					if ((LA1_3=='0'))
					{
						alt1 = 1;
					}
					else if ((LA1_3=='1'))
					{
						alt1 = 5;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 1, 5, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA1_2=='/'))
				{
					alt1 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case '0':
				{
				int LA1_2 = input.LA(2);

				if ((LA1_2=='-'))
				{
					switch (input.LA(3))
					{
					case '1':
						{
						alt1 = 3;
						}
						break;
					case '2':
						{
						alt1 = 6;
						}
						break;
					case '0':
						{
						alt1 = 7;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 1, 7, input, 3);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case '2':
				{
				alt1 = 4;
				}
				break;
			case '*':
				{
				alt1 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:50:20: '1-0'
				{
				DebugLocation(50, 20);
				Match("1-0"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:50:26: '1/2-1/2'
				{
				DebugLocation(50, 26);
				Match("1/2-1/2"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:50:36: '0-1'
				{
				DebugLocation(50, 36);
				Match("0-1"); 


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:50:42: '2-0'
				{
				DebugLocation(50, 42);
				Match("2-0"); 


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:50:48: '1-1'
				{
				DebugLocation(50, 48);
				Match("1-1"); 


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:50:54: '0-2'
				{
				DebugLocation(50, 54);
				Match("0-2"); 


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:50:60: '0-0'
				{
				DebugLocation(50, 60);
				Match("0-0"); 


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:50:66: '*'
				{
				DebugLocation(50, 66);
				Match('*'); 

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(50, 71);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:50:71: ( WHITESPACE )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>='\t' && LA2_1<='\n')||LA2_1=='\r'||LA2_1==' '))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:50:72: WHITESPACE
					{
					DebugLocation(50, 72);
					mWHITESPACE(); 

					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GAMERESULT", 3);
			LeaveRule("GAMERESULT", 3);
			LeaveRule_GAMERESULT();
		}
	}
	// $ANTLR end "GAMERESULT"

	partial void EnterRule_ELLIPSES();
	partial void LeaveRule_ELLIPSES();

	// $ANTLR start "ELLIPSES"
	[GrammarRule("ELLIPSES")]
	private void mELLIPSES()
	{
		EnterRule_ELLIPSES();
		EnterRule("ELLIPSES", 4);
		TraceIn("ELLIPSES", 4);
		try
		{
			int _type = ELLIPSES;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:51:9: ( '...' )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:51:11: '...'
			{
			DebugLocation(51, 11);
			Match("..."); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELLIPSES", 4);
			LeaveRule("ELLIPSES", 4);
			LeaveRule_ELLIPSES();
		}
	}
	// $ANTLR end "ELLIPSES"

	partial void EnterRule_MOVENUMBER();
	partial void LeaveRule_MOVENUMBER();

	// $ANTLR start "MOVENUMBER"
	[GrammarRule("MOVENUMBER")]
	private void mMOVENUMBER()
	{
		EnterRule_MOVENUMBER();
		EnterRule("MOVENUMBER", 5);
		TraceIn("MOVENUMBER", 5);
		try
		{
			int _type = MOVENUMBER;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:54:2: ( ( INT )+ DOT )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:54:4: ( INT )+ DOT
			{
			DebugLocation(54, 4);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:54:4: ( INT )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if (((LA3_1>='0' && LA3_1<='9')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:
					{
					DebugLocation(54, 4);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(54, 9);
			mDOT(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOVENUMBER", 5);
			LeaveRule("MOVENUMBER", 5);
			LeaveRule_MOVENUMBER();
		}
	}
	// $ANTLR end "MOVENUMBER"

	partial void EnterRule_SQUARE();
	partial void LeaveRule_SQUARE();

	// $ANTLR start "SQUARE"
	[GrammarRule("SQUARE")]
	private void mSQUARE()
	{
		EnterRule_SQUARE();
		EnterRule("SQUARE", 6);
		TraceIn("SQUARE", 6);
		try
		{
			int _type = SQUARE;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:58:8: ( INT ( INT )? )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:58:10: INT ( INT )?
			{
			DebugLocation(58, 10);
			mINT(); 
			DebugLocation(58, 14);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:58:14: ( INT )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if (((LA4_1>='0' && LA4_1<='9')))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:
				{
				DebugLocation(58, 14);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SQUARE", 6);
			LeaveRule("SQUARE", 6);
			LeaveRule_SQUARE();
		}
	}
	// $ANTLR end "SQUARE"

	partial void EnterRule_ALPHANUMERICMOVE();
	partial void LeaveRule_ALPHANUMERICMOVE();

	// $ANTLR start "ALPHANUMERICMOVE"
	[GrammarRule("ALPHANUMERICMOVE")]
	private void mALPHANUMERICMOVE()
	{
		EnterRule_ALPHANUMERICMOVE();
		EnterRule("ALPHANUMERICMOVE", 7);
		TraceIn("ALPHANUMERICMOVE", 7);
		try
		{
			int _type = ALPHANUMERICMOVE;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:60:2: ( ( 'a' .. 'h' ) ( '1' .. '8' ) ( ( '-' | 'x' ) ( 'a' .. 'h' ) ( '1' .. '8' ) )+ )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:60:4: ( 'a' .. 'h' ) ( '1' .. '8' ) ( ( '-' | 'x' ) ( 'a' .. 'h' ) ( '1' .. '8' ) )+
			{
			DebugLocation(60, 4);
			if ((input.LA(1)>='a' && input.LA(1)<='h'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(60, 14);
			if ((input.LA(1)>='1' && input.LA(1)<='8'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(60, 25);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:60:25: ( ( '-' | 'x' ) ( 'a' .. 'h' ) ( '1' .. '8' ) )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1=='-'||LA5_1=='x'))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:60:26: ( '-' | 'x' ) ( 'a' .. 'h' ) ( '1' .. '8' )
					{
					DebugLocation(60, 26);
					input.Consume();

					DebugLocation(60, 35);
					input.Consume();

					DebugLocation(60, 45);
					input.Consume();


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ALPHANUMERICMOVE", 7);
			LeaveRule("ALPHANUMERICMOVE", 7);
			LeaveRule_ALPHANUMERICMOVE();
		}
	}
	// $ANTLR end "ALPHANUMERICMOVE"

	partial void EnterRule_MOVESTRENGTH1();
	partial void LeaveRule_MOVESTRENGTH1();

	// $ANTLR start "MOVESTRENGTH1"
	[GrammarRule("MOVESTRENGTH1")]
	private void mMOVESTRENGTH1()
	{
		EnterRule_MOVESTRENGTH1();
		EnterRule("MOVESTRENGTH1", 8);
		TraceIn("MOVESTRENGTH1", 8);
		try
		{
			int _type = MOVESTRENGTH1;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:62:2: ( ( '!' | '?' )+ )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:62:4: ( '!' | '?' )+
			{
			DebugLocation(62, 4);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:62:4: ( '!' | '?' )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1=='!'||LA6_1=='?'))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:
					{
					DebugLocation(62, 4);
					input.Consume();


					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOVESTRENGTH1", 8);
			LeaveRule("MOVESTRENGTH1", 8);
			LeaveRule_MOVESTRENGTH1();
		}
	}
	// $ANTLR end "MOVESTRENGTH1"

	partial void EnterRule_MOVESTRENGTH2();
	partial void LeaveRule_MOVESTRENGTH2();

	// $ANTLR start "MOVESTRENGTH2"
	[GrammarRule("MOVESTRENGTH2")]
	private void mMOVESTRENGTH2()
	{
		EnterRule_MOVESTRENGTH2();
		EnterRule("MOVESTRENGTH2", 9);
		TraceIn("MOVESTRENGTH2", 9);
		try
		{
			int _type = MOVESTRENGTH2;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:64:2: ( LPAREN MOVESTRENGTH1 RPAREN )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:64:5: LPAREN MOVESTRENGTH1 RPAREN
			{
			DebugLocation(64, 5);
			mLPAREN(); 
			DebugLocation(64, 12);
			mMOVESTRENGTH1(); 
			DebugLocation(64, 26);
			mRPAREN(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOVESTRENGTH2", 9);
			LeaveRule("MOVESTRENGTH2", 9);
			LeaveRule_MOVESTRENGTH2();
		}
	}
	// $ANTLR end "MOVESTRENGTH2"

	partial void EnterRule_NAG();
	partial void LeaveRule_NAG();

	// $ANTLR start "NAG"
	[GrammarRule("NAG")]
	private void mNAG()
	{
		EnterRule_NAG();
		EnterRule("NAG", 10);
		TraceIn("NAG", 10);
		try
		{
			int _type = NAG;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:66:5: ( '$' ( INT )+ )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:66:8: '$' ( INT )+
			{
			DebugLocation(66, 8);
			Match('$'); 
			DebugLocation(66, 12);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:66:12: ( INT )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if (((LA7_1>='0' && LA7_1<='9')))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:
					{
					DebugLocation(66, 12);
					input.Consume();


					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NAG", 10);
			LeaveRule("NAG", 10);
			LeaveRule_NAG();
		}
	}
	// $ANTLR end "NAG"

	partial void EnterRule_LPAREN();
	partial void LeaveRule_LPAREN();

	// $ANTLR start "LPAREN"
	[GrammarRule("LPAREN")]
	private void mLPAREN()
	{
		EnterRule_LPAREN();
		EnterRule("LPAREN", 11);
		TraceIn("LPAREN", 11);
		try
		{
			int _type = LPAREN;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:67:9: ( '(' )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:67:11: '('
			{
			DebugLocation(67, 11);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LPAREN", 11);
			LeaveRule("LPAREN", 11);
			LeaveRule_LPAREN();
		}
	}
	// $ANTLR end "LPAREN"

	partial void EnterRule_RPAREN();
	partial void LeaveRule_RPAREN();

	// $ANTLR start "RPAREN"
	[GrammarRule("RPAREN")]
	private void mRPAREN()
	{
		EnterRule_RPAREN();
		EnterRule("RPAREN", 12);
		TraceIn("RPAREN", 12);
		try
		{
			int _type = RPAREN;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:68:8: ( ')' )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:68:10: ')'
			{
			DebugLocation(68, 10);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RPAREN", 12);
			LeaveRule("RPAREN", 12);
			LeaveRule_RPAREN();
		}
	}
	// $ANTLR end "RPAREN"

	partial void EnterRule_LBRACKET();
	partial void LeaveRule_LBRACKET();

	// $ANTLR start "LBRACKET"
	[GrammarRule("LBRACKET")]
	private void mLBRACKET()
	{
		EnterRule_LBRACKET();
		EnterRule("LBRACKET", 13);
		TraceIn("LBRACKET", 13);
		try
		{
			int _type = LBRACKET;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:69:9: ( '[' )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:69:12: '['
			{
			DebugLocation(69, 12);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LBRACKET", 13);
			LeaveRule("LBRACKET", 13);
			LeaveRule_LBRACKET();
		}
	}
	// $ANTLR end "LBRACKET"

	partial void EnterRule_RBRACKET();
	partial void LeaveRule_RBRACKET();

	// $ANTLR start "RBRACKET"
	[GrammarRule("RBRACKET")]
	private void mRBRACKET()
	{
		EnterRule_RBRACKET();
		EnterRule("RBRACKET", 14);
		TraceIn("RBRACKET", 14);
		try
		{
			int _type = RBRACKET;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:70:9: ( ']' )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:70:11: ']'
			{
			DebugLocation(70, 11);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RBRACKET", 14);
			LeaveRule("RBRACKET", 14);
			LeaveRule_RBRACKET();
		}
	}
	// $ANTLR end "RBRACKET"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 15);
		TraceIn("STRING", 15);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:72:9: ( '\"' (~ ( '\\\\' | '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:72:12: '\"' (~ ( '\\\\' | '\"' ) )* '\"'
			{
			DebugLocation(72, 12);
			Match('\"'); 
			DebugLocation(72, 16);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:72:16: (~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if (((LA8_1>='\u0000' && LA8_1<='!')||(LA8_1>='#' && LA8_1<='[')||(LA8_1>=']' && LA8_1<='\uFFFF')))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:
					{
					DebugLocation(72, 16);
					input.Consume();


					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(72, 33);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 15);
			LeaveRule("STRING", 15);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_LINECOMMENT();
	partial void LeaveRule_LINECOMMENT();

	// $ANTLR start "LINECOMMENT"
	[GrammarRule("LINECOMMENT")]
	private void mLINECOMMENT()
	{
		EnterRule_LINECOMMENT();
		EnterRule("LINECOMMENT", 16);
		TraceIn("LINECOMMENT", 16);
		try
		{
			int _type = LINECOMMENT;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:73:13: ( '%' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:73:17: '%' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
			{
			DebugLocation(73, 17);
			Match('%'); 
			DebugLocation(73, 21);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:73:21: (~ ( '\\n' | '\\r' ) )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if (((LA9_1>='\u0000' && LA9_1<='\t')||(LA9_1>='\u000B' && LA9_1<='\f')||(LA9_1>='\u000E' && LA9_1<='\uFFFF')))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:
					{
					DebugLocation(73, 21);
					input.Consume();


					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(73, 35);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:73:35: ( '\\r' )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1=='\r'))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:73:35: '\\r'
				{
				DebugLocation(73, 35);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(73, 41);
			Match('\n'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LINECOMMENT", 16);
			LeaveRule("LINECOMMENT", 16);
			LeaveRule_LINECOMMENT();
		}
	}
	// $ANTLR end "LINECOMMENT"

	partial void EnterRule_NESTED_ML_COMMENT();
	partial void LeaveRule_NESTED_ML_COMMENT();

	// $ANTLR start "NESTED_ML_COMMENT"
	[GrammarRule("NESTED_ML_COMMENT")]
	private void mNESTED_ML_COMMENT()
	{
		EnterRule_NESTED_ML_COMMENT();
		EnterRule("NESTED_ML_COMMENT", 17);
		TraceIn("NESTED_ML_COMMENT", 17);
		try
		{
			int _type = NESTED_ML_COMMENT;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:75:19: ( '{' ( options {greedy=false; } : ( NESTED_ML_COMMENT | . ) )* '}' )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:75:21: '{' ( options {greedy=false; } : ( NESTED_ML_COMMENT | . ) )* '}'
			{
			DebugLocation(75, 21);
			Match('{'); 
			DebugLocation(75, 25);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:75:25: ( options {greedy=false; } : ( NESTED_ML_COMMENT | . ) )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1=='}'))
				{
					alt12 = 2;
				}
				else if (((LA12_1>='\u0000' && LA12_1<='|')||(LA12_1>='~' && LA12_1<='\uFFFF')))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:75:52: ( NESTED_ML_COMMENT | . )
					{
					DebugLocation(75, 52);
					// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:75:52: ( NESTED_ML_COMMENT | . )
					int alt11=2;
					try { DebugEnterSubRule(11);
					try { DebugEnterDecision(11, false);
					int LA11_1 = input.LA(1);

					if ((LA11_1=='{'))
					{
						alt11 = 1;
					}
					else if (((LA11_1>='\u0000' && LA11_1<='z')||(LA11_1>='|' && LA11_1<='\uFFFF')))
					{
						alt11 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(11); }
					switch (alt11)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:75:53: NESTED_ML_COMMENT
						{
						DebugLocation(75, 53);
						mNESTED_ML_COMMENT(); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:75:73: .
						{
						DebugLocation(75, 73);
						MatchAny(); 

						}
						break;

					}
					} finally { DebugExitSubRule(11); }


					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(75, 78);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NESTED_ML_COMMENT", 17);
			LeaveRule("NESTED_ML_COMMENT", 17);
			LeaveRule_NESTED_ML_COMMENT();
		}
	}
	// $ANTLR end "NESTED_ML_COMMENT"

	partial void EnterRule_IDENTIFIER();
	partial void LeaveRule_IDENTIFIER();

	// $ANTLR start "IDENTIFIER"
	[GrammarRule("IDENTIFIER")]
	private void mIDENTIFIER()
	{
		EnterRule_IDENTIFIER();
		EnterRule("IDENTIFIER", 18);
		TraceIn("IDENTIFIER", 18);
		try
		{
			int _type = IDENTIFIER;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:77:2: ( ( 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | INT )* )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:77:4: ( 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | INT )*
			{
			DebugLocation(77, 4);
			if ((input.LA(1)>='A' && input.LA(1)<='Z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(77, 15);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:77:15: ( 'a' .. 'z' | 'A' .. 'Z' | INT )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if (((LA13_1>='0' && LA13_1<='9')||(LA13_1>='A' && LA13_1<='Z')||(LA13_1>='a' && LA13_1<='z')))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:
					{
					DebugLocation(77, 15);
					input.Consume();


					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENTIFIER", 18);
			LeaveRule("IDENTIFIER", 18);
			LeaveRule_IDENTIFIER();
		}
	}
	// $ANTLR end "IDENTIFIER"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 19);
		TraceIn("INT", 19);
		try
		{
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:82:5: ( '0' .. '9' )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:
			{
			DebugLocation(82, 5);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("INT", 19);
			LeaveRule("INT", 19);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 20);
		TraceIn("DOT", 20);
		try
		{
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:84:6: ( '.' )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:84:8: '.'
			{
			DebugLocation(84, 8);
			Match('.'); 

			}

		}
		finally
		{
			TraceOut("DOT", 20);
			LeaveRule("DOT", 20);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_WHITESPACE();
	partial void LeaveRule_WHITESPACE();

	// $ANTLR start "WHITESPACE"
	[GrammarRule("WHITESPACE")]
	private void mWHITESPACE()
	{
		EnterRule_WHITESPACE();
		EnterRule("WHITESPACE", 21);
		TraceIn("WHITESPACE", 21);
		try
		{
			int _type = WHITESPACE;
			int _channel = DefaultTokenChannel;
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:86:2: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:86:4: ( ' ' | '\\t' | '\\r' | '\\n' )
			{
			DebugLocation(86, 4);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(86, 29);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHITESPACE", 21);
			LeaveRule("WHITESPACE", 21);
			LeaveRule_WHITESPACE();
		}
	}
	// $ANTLR end "WHITESPACE"

	public override void mTokens()
	{
		// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:8: ( T__23 | T__24 | GAMERESULT | ELLIPSES | MOVENUMBER | SQUARE | ALPHANUMERICMOVE | MOVESTRENGTH1 | MOVESTRENGTH2 | NAG | LPAREN | RPAREN | LBRACKET | RBRACKET | STRING | LINECOMMENT | NESTED_ML_COMMENT | IDENTIFIER | WHITESPACE )
		int alt14=19;
		try { DebugEnterDecision(14, false);
		switch (input.LA(1))
		{
		case '-':
			{
			alt14 = 1;
			}
			break;
		case 'x':
			{
			alt14 = 2;
			}
			break;
		case '1':
			{
			switch (input.LA(2))
			{
			case '-':
			case '/':
				{
				alt14 = 3;
				}
				break;
			case '.':
				{
				alt14 = 5;
				}
				break;
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				{
				int LA14_3 = input.LA(3);

				if ((LA14_3=='.'||(LA14_3>='0' && LA14_3<='9')))
				{
					alt14 = 5;
				}
				else
				{
					alt14 = 6;
				}
				}
				break;
			default:
				alt14=6;
				break;

			}

			}
			break;
		case '0':
			{
			switch (input.LA(2))
			{
			case '-':
				{
				alt14 = 3;
				}
				break;
			case '.':
				{
				alt14 = 5;
				}
				break;
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				{
				int LA14_3 = input.LA(3);

				if ((LA14_3=='.'||(LA14_3>='0' && LA14_3<='9')))
				{
					alt14 = 5;
				}
				else
				{
					alt14 = 6;
				}
				}
				break;
			default:
				alt14=6;
				break;

			}

			}
			break;
		case '2':
			{
			switch (input.LA(2))
			{
			case '-':
				{
				alt14 = 3;
				}
				break;
			case '.':
				{
				alt14 = 5;
				}
				break;
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				{
				int LA14_3 = input.LA(3);

				if ((LA14_3=='.'||(LA14_3>='0' && LA14_3<='9')))
				{
					alt14 = 5;
				}
				else
				{
					alt14 = 6;
				}
				}
				break;
			default:
				alt14=6;
				break;

			}

			}
			break;
		case '*':
			{
			alt14 = 3;
			}
			break;
		case '.':
			{
			alt14 = 4;
			}
			break;
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			{
			switch (input.LA(2))
			{
			case '.':
				{
				alt14 = 5;
				}
				break;
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				{
				int LA14_3 = input.LA(3);

				if ((LA14_3=='.'||(LA14_3>='0' && LA14_3<='9')))
				{
					alt14 = 5;
				}
				else
				{
					alt14 = 6;
				}
				}
				break;
			default:
				alt14=6;
				break;

			}

			}
			break;
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
			{
			alt14 = 7;
			}
			break;
		case '!':
		case '?':
			{
			alt14 = 8;
			}
			break;
		case '(':
			{
			int LA14_2 = input.LA(2);

			if ((LA14_2=='!'||LA14_2=='?'))
			{
				alt14 = 9;
			}
			else
			{
				alt14 = 11;
			}
			}
			break;
		case '$':
			{
			alt14 = 10;
			}
			break;
		case ')':
			{
			alt14 = 12;
			}
			break;
		case '[':
			{
			alt14 = 13;
			}
			break;
		case ']':
			{
			alt14 = 14;
			}
			break;
		case '\"':
			{
			alt14 = 15;
			}
			break;
		case '%':
			{
			alt14 = 16;
			}
			break;
		case '{':
			{
			alt14 = 17;
			}
			break;
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
			{
			alt14 = 18;
			}
			break;
		case '\t':
		case '\n':
		case '\r':
		case ' ':
			{
			alt14 = 19;
			}
			break;
		default:
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
		}

		} finally { DebugExitDecision(14); }
		switch (alt14)
		{
		case 1:
			DebugEnterAlt(1);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:10: T__23
			{
			DebugLocation(1, 10);
			mT__23(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:16: T__24
			{
			DebugLocation(1, 16);
			mT__24(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:22: GAMERESULT
			{
			DebugLocation(1, 22);
			mGAMERESULT(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:33: ELLIPSES
			{
			DebugLocation(1, 33);
			mELLIPSES(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:42: MOVENUMBER
			{
			DebugLocation(1, 42);
			mMOVENUMBER(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:53: SQUARE
			{
			DebugLocation(1, 53);
			mSQUARE(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:60: ALPHANUMERICMOVE
			{
			DebugLocation(1, 60);
			mALPHANUMERICMOVE(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:77: MOVESTRENGTH1
			{
			DebugLocation(1, 77);
			mMOVESTRENGTH1(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:91: MOVESTRENGTH2
			{
			DebugLocation(1, 91);
			mMOVESTRENGTH2(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:105: NAG
			{
			DebugLocation(1, 105);
			mNAG(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:109: LPAREN
			{
			DebugLocation(1, 109);
			mLPAREN(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:116: RPAREN
			{
			DebugLocation(1, 116);
			mRPAREN(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:123: LBRACKET
			{
			DebugLocation(1, 123);
			mLBRACKET(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:132: RBRACKET
			{
			DebugLocation(1, 132);
			mRBRACKET(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:141: STRING
			{
			DebugLocation(1, 141);
			mSTRING(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:148: LINECOMMENT
			{
			DebugLocation(1, 148);
			mLINECOMMENT(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:160: NESTED_ML_COMMENT
			{
			DebugLocation(1, 160);
			mNESTED_ML_COMMENT(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:178: IDENTIFIER
			{
			DebugLocation(1, 178);
			mIDENTIFIER(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// D:\\DotNet\\Speeltuin\\PDNDatabase\\Pdn.g:1:189: WHITESPACE
			{
			DebugLocation(1, 189);
			mWHITESPACE(); 

			}
			break;

		}

	}


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

 
	#endregion

}
